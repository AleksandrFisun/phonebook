{"version":3,"file":"static/js/42.53f59787.chunk.js","mappings":"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","sources":["components/phonebook/PhoneBook.style.js","components/phonebook/formContact/FormContact.styled.js","components/phonebook/formContact/FormContact.jsx","components/phonebook/searchContact/SearchContact.style.js","components/phonebook/searchContact/SearchContact.jsx","components/phonebook/itemContact/itemContact.styled.js","components/phonebook/itemContact/itemContact.jsx","loader/Spinner.jsx","components/phonebook/listContact/ListContact.styled.js","components/phonebook/listContact/ListContact.jsx","components/phonebook/PhoneBook.jsx","Pages/PhoneBookPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #1e1e1e;\n  margin: 30px 16px;\n  border: 1px solid transparent;\n  border-radius: 30px;\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 40px;\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const WrapperLabelInput = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n  margin: 5px;\n  border-radius: 4px;\n  border: none;\n  background-color: white;\n`;\nexport const Button = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 220px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 20px 10px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport { useContacts } from 'hooks';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { Input, Button, Form, WrapperLabelInput } from './FormContact.styled';\n\nexport const FormContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const { item } = useContacts();\n  let contactNameId = nanoid();\n  let contactNumberId = nanoid();\n  const filteredContacts = item?.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(name.toLowerCase())\n  );\n\n  const onChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (filteredContacts.length > 0) {\n      return toast.warn(\n        '💩 There is already a contact with that name. Correct the entered name!'\n      );\n    }\n    dispatch(contactsOperations.createNewContact({ name, number }));\n    toast.success(`💪 Contact (${name}) added successfully !`);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <h2>Phone Book</h2>\n      <WrapperLabelInput>\n        <label htmlFor={contactNameId}>Name</label>\n        <Input\n          onChange={onChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          id={contactNameId}\n          placeholder=\"Aleksandr\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </WrapperLabelInput>\n      <WrapperLabelInput>\n        <label htmlFor={contactNumberId}>Number</label>\n        <Input\n          onChange={onChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          id={contactNumberId}\n          placeholder=\"+380956888227\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </WrapperLabelInput>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const WrapperSearchContact = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: flex-start;\n  margin: 10px auto;\n  padding: 10px;\n  max-width: 320px;\n`;\n\nexport const InputSearchContact = styled.input`\n  width: 300px;\n  height: 30px;\n  margin: 5px;\n  border-radius: 4px;\n  border: none;\n  background-color: white;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/phoneBook/contactsSlice';\nimport {\n  InputSearchContact,\n  WrapperSearchContact,\n} from './SearchContact.style';\n\nexport const SearchContact = () => {\n  const dispatch = useDispatch();\n  const idSerachContact = nanoid();\n  const { filter } = useContacts();\n\n  return (\n    <>\n      <WrapperSearchContact>\n        <label htmlFor={idSerachContact}>Find contacts by name</label>\n        <InputSearchContact\n          onChange={e =>\n            dispatch(setFilter(e.target.value.toLowerCase().trim()))\n          }\n          value={filter}\n          type=\"text\"\n          id={idSerachContact}\n          placeholder=\"Search contact\"\n        />\n      </WrapperSearchContact>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px auto;\n  padding: 10px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  min-width: 100px;\n  align-items: center;\n  width: 100%;\n`;\nexport const Span = styled.span`\n  font-size: 20px;\n`;\nexport const ButtonDel = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 100px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 10px 20px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: rgb(100%, 100%, 100%, 1);\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n  &:disabled {\n    background: rgb(58%, 58%, 58%, 1);\n  }\n`;\nexport const ButtonWrapper = styled.span`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\nexport const ContactContent = styled.span`\n  margin: 0 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { useContacts } from 'hooks';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport {\n  Item,\n  Span,\n  ButtonDel,\n  ButtonWrapper,\n  ContactContent,\n} from './itemContact.styled';\n\nconst ItemContact = ({ name, number, id }) => {\n  const { isRefreshing } = useContacts();\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Item>\n        <ContactContent id={id}>\n          <Span>{name}</Span>\n        </ContactContent>\n        <ContactContent>\n          <Span>{number}</Span>\n        </ContactContent>\n        <ContactContent>\n          <ButtonDel\n            onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            disabled={isRefreshing}\n          >\n            <ButtonWrapper>\n              <span>Delete</span>\n            </ButtonWrapper>\n          </ButtonDel>\n        </ContactContent>\n      </Item>\n    </>\n  );\n};\nexport default ItemContact;\nItemContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { ColorRing } from 'react-loader-spinner';\nconst SpinnerSmall = () => {\n  return (\n    <>\n      <ColorRing\n        visible={true}\n        height=\"12\"\n        width=\"12\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </>\n  );\n};\nconst SpinnerBig = () => {\n  return (\n    <>\n      <ColorRing\n        visible={true}\n        height=\"30\"\n        width=\"30\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </>\n  );\n};\nexport default (SpinnerSmall, SpinnerBig);\n","import styled from 'styled-components';\n\nexport const ListContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px auto;\n  padding: 10px;\n`;\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const SpinnerWrapper = styled.span`\n  width: 32px;\n  height: 32px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n  min-width: 450px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  min-width: 100px;\n  align-items: center;\n`;\nexport const Span = styled.span`\n  font-size: 20px;\n`;\nexport const ButtonDel = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 100px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 10px 20px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport ItemContact from 'components/phonebook/itemContact/itemContact';\nimport SpinnerBig from 'loader/Spinner';\nimport { useContacts } from 'hooks';\nimport {\n  ListContactWrapper,\n  List,\n  Title,\n  SpinnerWrapper,\n} from './ListContact.styled';\n\nexport const ListContact = () => {\n  const dispatch = useDispatch();\n  const { item, isRefreshing, filter } = useContacts();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getAllContacts());\n  }, [dispatch]);\n\n  const filteredContacts = item?.filter(\n    contact =>\n      contact.name && contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ListContactWrapper>\n      <Title>\n        <span>List Contacts</span>\n        <SpinnerWrapper>{isRefreshing && <SpinnerBig />}</SpinnerWrapper>\n      </Title>\n      <List>\n        {filteredContacts &&\n          filteredContacts.map(({ id, name, number }) => {\n            return <ItemContact key={id} id={id} name={name} number={number} />;\n          })}\n      </List>\n    </ListContactWrapper>\n  );\n};\n","import { Section, Wrapper } from './PhoneBook.style';\nimport { FormContact } from './formContact/FormContact';\nimport { SearchContact } from './searchContact/SearchContact';\nimport { ListContact } from './listContact/ListContact';\n\nconst PhoneBook = () => {\n  return (\n    <>\n      <Section>\n        <Wrapper>\n          <FormContact />\n          <SearchContact />\n          <ListContact />\n        </Wrapper>\n      </Section>\n    </>\n  );\n};\nexport default PhoneBook;\n","import PhoneBook from 'components/phonebook/PhoneBook';\n\nconst Contacts = () => {\n  return (\n    <>\n      <PhoneBook />\n    </>\n  );\n};\nexport default Contacts;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Section","styled","Wrapper","Form","WrapperLabelInput","Input","Button","FormContact","useState","name","setName","number","setNumber","dispatch","useDispatch","item","useContacts","contactNameId","nanoid","contactNumberId","filteredContacts","filter","contact","toLowerCase","includes","onChange","e","currentTarget","value","onSubmit","preventDefault","length","toast","contactsOperations","htmlFor","type","id","placeholder","pattern","title","required","WrapperSearchContact","InputSearchContact","SearchContact","idSerachContact","setFilter","target","trim","Item","Span","ButtonDel","ButtonWrapper","ContactContent","isRefreshing","onClick","disabled","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","ListContactWrapper","Title","SpinnerWrapper","List","ListContact","useEffect","Spinner","map","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}